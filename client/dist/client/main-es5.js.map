{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth.service.ts","webpack:///src/app/pages/edit-list/edit-list.component.ts","webpack:///src/app/pages/edit-list/edit-list.component.html","webpack:///src/app/pages/edit-task/edit-task.component.ts","webpack:///src/app/pages/edit-task/edit-task.component.html","webpack:///src/app/pages/login/login.component.ts","webpack:///src/app/pages/login/login.component.html","webpack:///src/app/pages/new-list/new-list.component.ts","webpack:///src/app/pages/new-list/new-list.component.html","webpack:///src/app/pages/new-task/new-task.component.ts","webpack:///src/app/pages/new-task/new-task.component.html","webpack:///src/app/pages/signup/signup.component.ts","webpack:///src/app/pages/signup/signup.component.html","webpack:///src/app/pages/task-view/task-view.component.ts","webpack:///src/app/pages/task-view/task-view.component.html","webpack:///src/app/task.service.ts","webpack:///src/app/web-req-intreseptor.service.ts","webpack:///src/app/web-request.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","AuthService","http","webService","router","email","password","login","pipe","res","setSession","body","user","_id","authTokens","accessToken","refreshToken","console","log","signUp","newUser","userId","localStorage","setItem","removeSession","navigate","getItem","removeItem","get","ROOT_URL","headers","getRefreshToken","getUserId","observe","setAccessToken","providedIn","EditListComponent","route","taskServie","params","subscribe","p","listId","getOneList","data","updateList","editList","EditTaskComponent","taskService","taskId","getOneTask","taskTitle","updateTask","editTask","LoginComponent","authService","gmail","alert","error","onUserLogin","NewListComponent","createList","createNewList","NewTaskComponent","createTask","newTask","_listId","createNewTask","SignupComponent","onUserSingUp","TaskViewComponent","getTasks","tasks","undefined","getList","list","lists","task","completed","logout","deleteList","deleteTask","filter","val","TaskService","webRequestService","post","patch","url","WebReqIntreseptorService","next","addAuthHeader","handle","err","status","accessTokenRefreshing","getRefreshAccessToken","token","getAccessToken","clone","setHeaders","WebRequestService","payload","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { TaskViewComponent } from './pages/task-view/task-view.component';\nimport { NewListComponent } from './pages/new-list/new-list.component'\nimport { NewTaskComponent } from './pages/new-task/new-task.component';\nimport { LoginComponent } from './pages/login/login.component'\nimport { SignupComponent } from './pages/signup/signup.component'\nimport { EditListComponent } from './pages/edit-list/edit-list.component';\nimport { EditTaskComponent } from './pages/edit-task/edit-task.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/lists', pathMatch: 'full' },\n  { path: 'new-list', component: NewListComponent },\n  { path: 'edit-list/:listId', component: EditListComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'signup', component: SignupComponent },\n  { path: 'lists', component: TaskViewComponent },\n  { path: 'lists/:listId', component: TaskViewComponent },\n  { path: 'lists/:listId/new-task', component: NewTaskComponent },\n  { path: 'lists/:listId/edit-task/:taskId', component: EditTaskComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\n\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'client';\n}\n","\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TaskViewComponent } from './pages/task-view/task-view.component';\n\nimport  { HttpClientModule, HTTP_INTERCEPTORS} from  '@angular/common/http';\nimport { NewListComponent } from './pages/new-list/new-list.component';\nimport { NewTaskComponent } from './pages/new-task/new-task.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { WebReqIntreseptorService } from './web-req-intreseptor.service';\nimport { SignupComponent } from './pages/signup/signup.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport { EditListComponent } from './pages/edit-list/edit-list.component';\nimport { EditTaskComponent } from './pages/edit-task/edit-task.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TaskViewComponent,\n    NewListComponent,\n    NewTaskComponent,\n    LoginComponent,\n    SignupComponent,\n    EditListComponent,\n    EditTaskComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    MatMenuModule,\n    MatButtonModule,\n    MatIconModule\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS , useClass:WebReqIntreseptorService , multi: true}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { WebRequestService } from './web-request.service';\nimport { Router } from '@angular/router';\nimport { tap, shareReplay } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private http: HttpClient,\n    private webService: WebRequestService,\n    private router: Router\n  ) { }\n\n  login(email: string, password: string) {\n    return this.webService.login(email, password).pipe(\n      shareReplay(),\n      tap((res: HttpResponse<any>) => {\n        this.setSession(res.body.user._id, res.body.authTokens.accessToken, res.body.authTokens.refreshToken);\n        console.log(\"Login successfull\")\n      })\n    )\n  }\n\n  signUp(email: string, password: string) {\n    return this.webService.signUp(email, password).pipe(\n      shareReplay(),\n      tap((res: HttpResponse<any>) => {\n        this.setSession(res.body.newUser._id, res.body.authTokens.accessToken, res.body.authTokens.refreshToken);\n        console.log(\"Login successfull\")\n      })\n    )\n  }\n\n  // set authoraization credensials in localStorage\n  private setSession(userId: string, accessToken: string, refreshToken: string) {\n    localStorage.setItem('user-id', userId)\n    localStorage.setItem('x-access-token', accessToken)\n    localStorage.setItem('x-refresh-token', refreshToken)\n  }\n\n  logout() {\n    this.removeSession()\n    console.log('Logout successfull')\n    this.router.navigate(['/login'])\n  }\n\n  getAccessToken() {\n    return localStorage.getItem('x-access-token');\n  }\n\n  setAccessToken(accessToken: string) {\n    localStorage.setItem('x-access-token', accessToken)\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem('x-refresh-token')\n  }\n\n  getUserId() {\n    return localStorage.getItem('user-id')\n  }\n\n  // remove authoraization credensials in localStorage\n  private removeSession() {\n    localStorage.removeItem('user-id')\n    localStorage.removeItem('x-access-token')\n    localStorage.removeItem('x-refresh-token')\n  }\n\n  getRefreshAccessToken(){\n    return this.http.get(`${this.webService.ROOT_URL}/users/me/access-token`,{\n      headers:{\n        'x-refresh-token':this.getRefreshToken(),\n        '_id':this.getUserId()\n      },\n      observe:'response'\n    }).pipe(\n      tap((res: HttpResponse<any>)=>{\n        this.setAccessToken(res.body.accessToken)\n      })\n    )\n  }\n}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { TaskService } from 'src/app/task.service';\nimport { List } from 'src/app/models/list.model';\n\n@Component({\n  selector: 'app-edit-list',\n  templateUrl: './edit-list.component.html',\n  styleUrls: ['./edit-list.component.css']\n})\nexport class EditListComponent implements OnInit {\n\n  constructor(\n    private route:ActivatedRoute,\n    private taskServie:TaskService,\n    private router: Router\n  ) { }\n\n  listId:string;\n  title:string;\n\n  ngOnInit(): void {\n    this.route.params.subscribe((p: Params) => {\n      this.listId = p.listId;\n      this.taskServie.getOneList(`lists/${p.listId}`).subscribe((data:List)=>{\n        this.title = data.title;\n      })\n    })\n  }\n\n  editList(title:string){\n    this.taskServie.updateList(this.listId ,title).subscribe(()=>{\n      this.router.navigate(['/lists',this.listId])\n    });\n  }\n\n}\n","<div class=\"centered-content\">\n    <div class=\"modal-box\">\n        <h1 class=\"title\">\n            Edit your list\n        </h1>\n\n        <div>\n            <input #listNameInput class=\"list-title\" type=\"text\" [value]=\"title\">\n            <button class=\"create-button\" (click)=\"editList(listNameInput.value)\">Update</button>\n        </div>\n\n        <button class=\"go-back\" routerLink=\"/\">Go Back</button>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { TaskService } from 'src/app/task.service';\nimport { Task } from 'src/app/models/task.model';\n\n@Component({\n  selector: 'app-edit-task',\n  templateUrl: './edit-task.component.html',\n  styleUrls: ['./edit-task.component.css']\n})\nexport class EditTaskComponent implements OnInit {\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private taskService: TaskService\n  ) { }\n\n  taskId:string;\n  listId:string;\n  taskTitle:string;\n\n  ngOnInit(): void {\n    this.route.params.subscribe((p:Params)=>{\n      this.taskId = p.taskId\n      this.listId = p.listId\n      this.taskService.getOneTask(p.listId, p.taskId).subscribe((data:Task)=>{\n        this.taskTitle = data.title\n      })\n    })\n  }\n\n  editTask(title:string){\n    this.taskService.updateTask(this.listId, this.taskId, title).subscribe(()=>{\n      this.router.navigate(['/lists',this.listId])\n    })\n  }\n\n}\n","<div class=\"centered-content\">\n    <div class=\"modal-box\">\n        <h1 class=\"title\">\n            Edit your task\n        </h1>\n\n        <div>\n            <input #listNameInput class=\"list-title\" type=\"text\" [value]=\"taskTitle\">\n            <button class=\"create-button\" (click)=\"editTask(listNameInput.value)\" >Update</button> \n        </div>\n\n        <button class=\"go-back\" routerLink=\"/\">Go Back</button>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/auth.service';\nimport { HttpResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  onUserLogin(gmail: string, password: string) {\n    if (gmail === '' || password === '') {\n      alert('Empty value is not allwoed');\n    } else {\n      this.authService.login(gmail, password).subscribe(data=>{\n        alert('Welcome to our Task Manager Application')\n        this.router.navigate(['/lists'])\n      }, error=>{\n        alert('You are make a Bad request')\n      })\n    }\n  }\n}\n","<div class=\"centered-content\">\n    <div class=\"modal-box\">\n        <h1 class=\"title\">Login</h1>\n        <div class=\"from-control\">\n            <input #userGamilInput type=\"text\" required placeholder=\"Enter your email\">\n            <input #userPasswordInput type=\"password\" required placeholder=\"Enter your Password\">\n        </div>\n        <button class=\"login-btn\" (click)=\"onUserLogin(userGamilInput.value, userPasswordInput.value )\">Login</button>\n        <p class=\"user-bottom-message\">You haven't any account <a routerLink=\"/signup\">Sign Up</a> here </p>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { TaskService } from 'src/app/task.service';\nimport { Router } from '@angular/router';\nimport { List } from 'src/app/models/list.model';\n\n@Component({\n  selector: 'app-new-list',\n  templateUrl: './new-list.component.html',\n  styleUrls: ['./new-list.component.css']\n})\n\nexport class NewListComponent implements OnInit {\n\n  constructor(\n    private taskService: TaskService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  createNewList(title: string) {\n    if (title === '') {\n      alert('Empty value is not allowed')\n    } else {\n      this.taskService.createList(title).subscribe((res: List) => {\n        this.router.navigate(['/lists', res._id])\n      })\n    }\n  }\n\n}\n","<div class=\"centered-content\">\n    <div class=\"modal-box\">\n        <h1 class=\"title\">\n            Create a new list\n        </h1>\n\n        <div>\n            <input #listNameInput class=\"list-title\" type=\"text\" placeholder=\"Enter list name\">\n            <button class=\"create-button\" (click)=\"createNewList(listNameInput.value)\">Create</button>\n        </div>\n\n        <button class=\"go-back\" routerLink=\"/\">Go Back</button>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { TaskService } from 'src/app/task.service';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Task } from 'src/app/models/task.model';\n\n@Component({\n  selector: 'app-new-task',\n  templateUrl: './new-task.component.html',\n  styleUrls: ['./new-task.component.css']\n})\nexport class NewTaskComponent implements OnInit {\n\n  constructor(\n    private taskService: TaskService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) { }\n\n  listId: string;\n\n  ngOnInit(): void {\n    this.route.params.subscribe((p: Params) => {\n      this.listId = p['listId']\n      console.log(this.listId)\n    })\n  }\n\n  createNewTask(title: string) {\n    if (title === '') {\n      alert('Empty value is not allowed')\n    } else {\n      this.taskService.createTask(title, this.listId).subscribe((newTask: Task) => {\n        this.router.navigate(['lists/' + newTask._listId])\n      })\n    }\n  }\n}\n","<div class=\"centered-content\">\n    <div class=\"modal-box\">\n        <h1 class=\"title\">\n            Create a new task\n        </h1>\n\n        <div>\n            <input #listNameInput class=\"list-title\" type=\"text\" placeholder=\"Enter task \">\n            <button class=\"create-button\" (click)=\"createNewTask(listNameInput.value)\" >Create</button> \n        </div>\n\n        <button class=\"go-back\" routerLink=\"/\">Go Back</button>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  onUserSingUp(email: string, password: string) {\n    if (email === '' || password === '') {\n      alert('Empty value is not allwoed');\n    } else {\n      this.authService.signUp(email, password).subscribe(data =>{\n        alert('Welcome to our Task Manager Application')\n        this.router.navigate(['/lists'])\n      }, error=>{\n        alert('You are make a Bad request')\n      })\n    }\n  }\n\n}\n","<div class=\"centered-content\">\n    <div class=\"modal-box\">\n        <h1 class=\"title\">Sign Up</h1>\n        <div class=\"from-control\">\n            <input #userGamilInput  type=\"text\" placeholder=\"Enter your email\">\n            <input #userPasswordInput type=\"password\" placeholder=\"Enter your Password\">\n        </div>\n        <button class=\"login-btn\" (click)=\"onUserSingUp(userGamilInput.value, userPasswordInput.value )\">SingUp</button>\n        <p class=\"user-bottom-message\">You haven't any account <a routerLink=\"/login\">Login</a> here </p>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { TaskService } from 'src/app/task.service';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Task } from 'src/app/models/task.model';\nimport { List } from 'src/app/models/list.model';\nimport {AuthService} from 'src/app/auth.service';\n\n@Component({\n  selector: 'app-task-view',\n  templateUrl: './task-view.component.html',\n  styleUrls: ['./task-view.component.css']\n})\n\nexport class TaskViewComponent implements OnInit {\n\n  lists: List[];\n  tasks: Task[];\n\n  constructor(\n    private taskServie: TaskService,\n    private route: ActivatedRoute,\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  listId:string;\n\n  ngOnInit(): void {\n    this.route.params.subscribe((p: Params) => {\n      if (p.listId) {\n        this.taskServie.getTasks(p.listId).subscribe((tasks: Task[]) => {\n          this.tasks = tasks\n        })\n      }else{\n        this.tasks = undefined\n      }\n    })\n\n    this.taskServie.getList().subscribe((list: List[]) => {\n      this.lists = list;\n    })\n\n    this.route.params.subscribe((p:Params)=>{\n      this.listId = p['listId']\n      console.log(this.listId)\n    })\n  }\n\n  onTaskClick(task: Task) {\n    console.log(task)\n    this.taskServie.completed(task).subscribe(() => {\n      task.completed = !task.completed;\n    })\n  }\n\n  logout(){\n    this.authService.logout();\n  }\n\n  listDelete(){\n    this.taskServie.deleteList(this.listId).subscribe(()=>{\n      this.router.navigate(['lists'])\n    })\n  }\n\n  taskDelete(taskId:string){\n    this.taskServie.deleteTask(this.listId,taskId).subscribe(()=>{\n      this.tasks = this.tasks.filter(val => val._id !== taskId)\n    })\n  }\n\n}\n","<div class=\"centered-content\">\n    <div class=\"task-manager-container\">\n\n        <button class=\"list-task-menu\" mat-mini-fab color=\"primary\" [matMenuTriggerFor]=\"menu\">\n            <mat-icon>menu</mat-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"logout()\">Logout</button>\n        </mat-menu>\n\n        <div class=\"sidebar\">\n            <h1>Lists</h1>\n            <!-- list menu element -->\n            <div class=\"list-menu\">\n                <a class=\"list-menu-item\" *ngFor=\"let list of lists\" [routerLink]=\"['/lists', list._id]\"\n                    routerLinkActive=\"is-active\">\n                    <p class=\"list-task-title\">{{list.title}}</p>\n                    <button class=\"list-task-option\" mat-icon-button [matMenuTriggerFor]=\"list_menu\">\n                        <mat-icon>more_vert</mat-icon>\n                    </button>\n                    <mat-menu #list_menu=\"matMenu\">\n                        <button mat-menu-item [routerLink]=\"['/edit-list',listId]\">Edit</button>\n                        <button mat-menu-item (click)=\"listDelete()\">Delete</button>\n                    </mat-menu>\n                </a>\n            </div>\n            <button class=\"new-list\" routerLink=\"/new-list\">+ New List</button>\n        </div>\n\n        <div class=\"task-list-container\">\n            <div *ngIf=\"tasks\">\n                <h1>Tasks</h1>\n                <!-- task elements -->\n                <div class=\"task\" *ngFor=\"let task of tasks\">\n                    <div class=\"task-list-title\" (click)=\"onTaskClick(task)\" [ngClass]=\"{'task-completed':task.completed}\">\n                        <span>{{task.title}}</span>\n                    </div>\n                    <div class=\"task-list-option\">\n                        <button mat-icon-button [matMenuTriggerFor]=\"task_menu\">\n                            <mat-icon>more_vert</mat-icon>\n                        </button>\n                        <mat-menu #task_menu=\"matMenu\">\n                            <button mat-menu-item [routerLink]=\"['/lists', listId, 'edit-task', task._id]\" >Edit</button>\n                            <button mat-menu-item (click)=\"taskDelete(task._id)\">Delete</button>\n                        </mat-menu>\n                    </div>\n                </div>\n                <button class=\"task-add-btn\" routerLink=\"./new-task\">+</button>\n                <h3 class=\"empty-message\" *ngIf=\"tasks.length === 0\">There are no taks here! Click the add button to\n                    create task</h3>\n            </div>\n            <div class=\"empty-message\" *ngIf=\"!tasks\">\n                <h1>Please select your list.</h1>\n            </div>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport {WebRequestService} from './web-request.service';\nimport { Task } from './models/task.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  constructor(private webRequestService: WebRequestService) { }\n\n  createList(title:string){\n    return this.webRequestService.post('lists',{title})\n  }\n\n  updateList(id:string, title:string){\n    return this.webRequestService.patch(`lists/${id}`,{title})\n  }\n\n  getList(){\n    return this.webRequestService.get('lists')\n  }\n\n  getOneList(url:string){\n    return this.webRequestService.get(url)\n  }\n\n  deleteList(listId:string){\n    return this.webRequestService.delete(`lists/${listId}`)\n  }\n  \n  getTasks(listId: string){\n    return this.webRequestService.get(`lists/${listId}/tasks`)\n  }\n\n  createTask(title:string , listId:string){\n    return this.webRequestService.post(`lists/${listId}/tasks`,{title})\n  }\n\n  completed(task: Task){\n    return this.webRequestService.patch(`lists/${task._listId}/tasks/${task._id}`,{\n      completed: !task.completed\n    })\n  }\n\n  deleteTask(listId:string, taskId:string){\n    return this.webRequestService.delete(`lists/${listId}/tasks/${taskId}`)\n  }\n\n  updateTask(listId:string, taskId:string, title:string){\n    return this.webRequestService.patch(`lists/${listId}/tasks/${taskId}`,{title})\n  }\n\n  getOneTask(listId:string , taskId:string){\n    return this.webRequestService.get(`lists/${listId}/tasks/${taskId}`);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse  } from '@angular/common/http'\nimport {Observable, throwError, empty } from 'rxjs'\nimport { AuthService } from './auth.service';\nimport { catchError, switchMap, tap } from 'rxjs/operators'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebReqIntreseptorService implements HttpInterceptor{\n\n  constructor(private authService: AuthService) { }\n\n  intercept(req :HttpRequest<any> , next: HttpHandler):Observable<any>{\n    // handel the request\n    req = this.addAuthHeader(req);\n\n    // call next() and handle this response\n    return next.handle(req).pipe(\n      catchError((err:HttpErrorResponse)=>{\n        // if error status is 401 that means unauthorized req\n        if(err.status === 401){\n\n          return this.accessTokenRefreshing().pipe(\n            switchMap(()=>{\n              req = this.addAuthHeader(req)\n              return next.handle(req)\n            }),\n            catchError((err:any)=>{\n              this.authService.logout()\n              return empty()\n            })\n          )\n        }\n        return throwError(err)\n      })\n    )\n  }\n\n  accessTokenRefreshing(){\n    return this.authService.getRefreshAccessToken().pipe(\n      tap(()=>{\n        console.log('Access token is refreshed')\n      })\n    )\n  }\n\n  addAuthHeader(req: HttpRequest<any>){\n    // get the access token\n      const token = this.authService.getAccessToken();\n      \n      if(token){\n        // append the access token to the request header\n        return req.clone({\n          setHeaders:{\n            'x-access-token':token\n          }\n        })\n      }\n\n      return req;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebRequestService {\n\n  readonly ROOT_URL;\n\n  constructor(private http: HttpClient) {\n    this.ROOT_URL = 'https://app-api-task-manager.herokuapp.com'\n  }\n\n  get(url: string) {\n    return this.http.get(`${this.ROOT_URL}/${url}`)\n  }\n\n  post(url: string, payload: Object) {\n    return this.http.post(`${this.ROOT_URL}/${url}`, payload)\n  }\n\n  patch(url: string, payload: Object) {\n    return this.http.patch(`${this.ROOT_URL}/${url}`, payload)\n  }\n\n  delete(url: string) {\n    return this.http.delete(`${this.ROOT_URL}/${url}`)\n  }\n\n  login(email: string, password: string) {\n    return this.http.post(`${this.ROOT_URL}/users/login`, { email, password }, { observe: 'response' })\n  }\n\n  signUp(email:string , password:string){\n    return this.http.post(`${this.ROOT_URL}/users`,{email, password}, {observe:'response'})\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}